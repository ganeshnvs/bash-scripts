#!/bin/bash

# Most of the below utilites depends on the "jq" tool for parsing the 
# See https://stedolan.github.io/jq/ for installing jq tool.
# JSON reponse from GitHub rest API. Below environment variables need to
# be configured for the tool to function.
# GITHUB_ACCOUNT - Organization or Username of the GitHub account.
# GITHUB_API_URL - Need to be changed, if you have enterprise account. 
# 				   Otherwise default value is fine.
# TOKEN_DEV_OPS - GitHub token of main DevOps account
# TOKEN_DEV_OPS_1 - GitHub token of subordinate DevOps account-1
# TOKEN_DEV_OPS_2 - GitHub token of subordinate DevOps account-2
# 


export GITHUB_ACCOUNT=
export TOKEN_DEV_OPS=
export TOKEN_DEV_OPS_1=
export TOKEN_DEV_OPS_2=

export GITHUB_API_URL="https://api.github.com/repos/$GITHUB_ACCOUNT"

auto_merge() {
	local project_name source_branch target_branch source_helper_branch target_helper_branch pr_url
	project_name=$1
	source_branch=$2
	target_branch=$3
	
	ts=`date +%s`
	source_helper_branch="temp/smh-$source_branch-$ts"
	target_helper_branch="temp/tmh-$target_branch-$ts"

	create_branch $project_name $source_helper_branch $source_branch
	create_branch $project_name $target_helper_branch $target_branch

	_auto_merge $project_name $source_helper_branch $target_helper_branch &&
		_auto_merge $project_name $target_helper_branch $target_branch
}

_auto_merge() {
	local project_name source_branch target_branch pr_url
	project_name=$1
	source_branch=$2
	target_branch=$3

	pr_url=`create_pr $project_name $source_branch $target_branch "[DevOps] Auto PR for merging $source_branch to $target_branch"`
	if has_merge_conflicts $pr_url; then
		echo "PR has conflicts: $pr_url"
		$pr_url >> conflicts_to_review
		return 1
	fi

	approve_pr $pr_url && merge_pr $pr_url
}


create_branch() {
	local project_name branch_name parent_branch url parent_sha
	project_name=$1
	branch_name=$2
	parent_branch=$3

	parent_sha=`get_branch_sha $project_name $parent_branch`
	url="$GITHUB_API_URL/$project_name/git/refs"

	curl -s -X POST -H "Authorization: token $TOKEN_DEV_OPS" -H "Content-Type: application/json" \
	"$url" -d "{\"ref\": \"refs/heads/$branch_name\", \"sha\": \"$parent_sha\"}"
}


get_branch_sha() {
	local project_name branch_name url
	project_name=$1
	branch_name=$2
	url="$GITHUB_API_URL/$project_name/git/ref/heads/$branch_name"
	curl -s -X GET -H "Authorization: token $TOKEN_DEV_OPS" -H "Content-Type: application/json" "$url" | jq -r '.object.sha'
}


create_pr() {
	local project_name source target title
	project_name=$1
	source=$2
	target=$3
	title=$4
	curl -s -X POST -H "Authorization: token $TOKEN_DEV_OPS" -H "Content-Type: application/json" \
	"$GITHUB_API_URL/$project_name/pulls" -d "{\"title\": \"$title\", \"body\": \"$title\", \"head\": \"$source\", \"base\": \"$target\"}" | jq -r '.url'
}

has_merge_conflicts() {
	local pr_url m_state;
	pr_url=$1
	m_state=`curl -s -X GET -H "Authorization: token $TOKEN_DEV_OPS" -H "Content-Type: application/json" "$pr_url" | jq -r '.mergeable_state'`
	[[ $m_state == "dirty" ]]
}

approve_pr() {
	local pr_url status_url pr_approve_payload
	pr_url=$1
	
	pr_approve_payload="{\"body\": \"Auto approved by DevOps.\", \"event\": \"APPROVE\"}"
	status_approve_payload="{\"state\": \"success\", \"context\": \"jenkinsci/pr-merge\", \"description\": \"Auto approved by DevOps.\"}"

	echo "Approving the PR = $pr_url"
	curl -s -X POST -H "Authorization: token $TOKEN_DEV_OPS_1" -H "Content-Type: application/json" "$pr_url/reviews" -d "$pr_approve_payload" > /dev/null
	curl -s -X POST -H "Authorization: token $TOKEN_DEV_OPS_2" -H "Content-Type: application/json" "$pr_url/reviews" -d "$pr_approve_payload" > /dev/null

	echo "Providng success status context for jenkinsci/pr-merge"
	status_url=`curl -s -X GET -H "Authorization: token $TOKEN_DEV_OPS" -H "Content-Type: application/json" "$pr_url" | jq -r '._links.statuses.href'`
	curl -s -X POST -H "Authorization: token $TOKEN_DEV_OPS" -H "Content-Type: application/json" "$status_url" -d "$status_approve_payload" > /dev/null
}

merge_pr() {
	local pr_url
	pr_url=$1
	echo "Merging the PR = $pr_url"
	response_status=`curl -s -X PUT -I -H "Authorization: token $TOKEN_DEV_OPS" "$pr_url/merge" | awk 'NR==1{print $2}'`
}


